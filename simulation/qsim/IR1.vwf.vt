// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/23/2020 17:46:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          clocks
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clocks_vlg_vec_tst();
// constants                                           
// general purpose registers
reg xtal_in;
// wires                                               
wire A_stolb;
wire t3n;
wire t4n;
wire t5n;
wire t6n;
wire t7n;
wire t8n;
wire t9n;
wire t10;
wire t10n;
wire t_romn;

// assign statements (if any)                          
clocks i1 (
// port map - connection between master ports and signals/registers   
	.A_stolb(A_stolb),
	.t3n(t3n),
	.t4n(t4n),
	.t5n(t5n),
	.t6n(t6n),
	.t7n(t7n),
	.t8n(t8n),
	.t9n(t9n),
	.t10(t10),
	.t10n(t10n),
	.t_romn(t_romn),
	.xtal_in(xtal_in)
);
initial 
begin 
#4000000 $finish;
end 

// xtal_in
always
begin
	xtal_in = 1'b0;
	xtal_in = #50000 1'b1;
	#50000;
end 
endmodule

